services:
  db:
    container_name: database
    image: postgres:13
    restart: always
    environment:
      POSTGRES_DB: your_database_name
      POSTGRES_USER: your_database_user
      POSTGRES_PASSWORD: your_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - django_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    container_name: django
    image: django:transcendance
    build:
      context: ./website  # Le contexte de build est maintenant ./srcs
      dockerfile: Dockerfile
    volumes:
      - ./website/srcs:/app/srcs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_NAME=your_database_name
      - DB_USER=your_database_user
      - DB_PASSWORD=your_password
      - DB_HOST=db
      - DB_PORT=5432
    networks:
      - django_network

  bot:
    container_name: bot
    image: bot:transcendance
    build:
      context: ./AI
      dockerfile: Dockerfile
    networks:
      - django_network
    ports:
      - "8081:8081"

  pong:
    container_name: pong
    image: pong:transcendance
    build:
      context: ./pong  # Le contexte de build est maintenant ./srcs
      dockerfile: ./Dockerfile
    volumes:
      - ./pong:/app
    ports:
      - "8080:8080"
    networks:
      - django_network

  blockchain:
    container_name: ganache
    image: blockchain:transcendance
    build:
      context: ./blockchain
      dockerfile: dockerfile
    networks:
      - django_network
    ports:
      - "8545:8545"
    volumes:
      - ./srcs:/app

networks:
  django_network:

volumes:
  postgres_data:
